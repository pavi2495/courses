{"ast":null,"code":"var _jsxFileName = \"/home/azhagu/workspace/note-taking/frontend/src/pages/HomePage.tsx\";\nimport React from \"react\";\nimport { render, fireEvent, waitFor } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom/extend-expect\";\nimport NoteDialogBox from \"..//NoteDialogBox\"; // Adjust the import path based on your project structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndescribe(\"NoteDialogBox Component\", () => {\n  test(\"renders without crashing\", () => {\n    const {\n      getByText\n    } = render( /*#__PURE__*/_jsxDEV(NoteDialogBox, {\n      open: true,\n      onClose: () => {},\n      onSave: () => {},\n      title: \"\",\n      body: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this));\n    const addNoteText = getByText(\"Add New Note\");\n    expect(addNoteText).toBeInTheDocument();\n  });\n  test(\"disables save button if title or body is empty\", async () => {\n    const onSaveMock = jest.fn();\n    const onCloseMock = jest.fn();\n    const {\n      getByPlaceholderText,\n      getByText\n    } = render( /*#__PURE__*/_jsxDEV(NoteDialogBox, {\n      open: true,\n      onClose: onCloseMock,\n      onSave: onSaveMock,\n      title: \"\",\n      body: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this));\n    const titleInput = getByPlaceholderText(\"Title\");\n    const bodyInput = getByPlaceholderText(\"Body\");\n    const saveButton = getByText(\"Save\");\n\n    // Verify save button is initially disabled\n    expect(saveButton).toBeDisabled();\n\n    // Enter valid title and body\n    fireEvent.change(titleInput, {\n      target: {\n        value: \"Valid Title\"\n      }\n    });\n    fireEvent.change(bodyInput, {\n      target: {\n        value: \"Valid Body\"\n      }\n    });\n\n    // Wait for the component to re-render after state updates\n    await waitFor(() => {\n      // Save button should not have 'disabled' attribute\n      expect(saveButton).not.toBeDisabled();\n    });\n\n    // Clear title and body to make save button disabled\n    fireEvent.change(titleInput, {\n      target: {\n        value: \"\"\n      }\n    });\n    fireEvent.change(bodyInput, {\n      target: {\n        value: \"\"\n      }\n    });\n\n    // Wait for the component to re-render after state updates\n    await waitFor(() => {\n      // Save button should have 'disabled' attribute set to true\n      expect(saveButton).toBeDisabled();\n    });\n  });\n});","map":{"version":3,"names":["React","render","fireEvent","waitFor","NoteDialogBox","jsxDEV","_jsxDEV","describe","test","getByText","open","onClose","onSave","title","body","fileName","_jsxFileName","lineNumber","columnNumber","addNoteText","expect","toBeInTheDocument","onSaveMock","jest","fn","onCloseMock","getByPlaceholderText","titleInput","bodyInput","saveButton","toBeDisabled","change","target","value","not"],"sources":["/home/azhagu/workspace/note-taking/frontend/src/pages/HomePage.tsx"],"sourcesContent":["import React from \"react\";\nimport { render, fireEvent, waitFor } from \"@testing-library/react\";\nimport \"@testing-library/jest-dom/extend-expect\";\n\nimport NoteDialogBox from \"..//NoteDialogBox\"; // Adjust the import path based on your project structure\n\ndescribe(\"NoteDialogBox Component\", () => {\n  test(\"renders without crashing\", () => {\n    const { getByText } = render(\n      <NoteDialogBox open={true} onClose={() => {}} onSave={() => {}} title=\"\" body=\"\" />\n    );\n    const addNoteText = getByText(\"Add New Note\");\n    expect(addNoteText).toBeInTheDocument();\n  });\n\n  test(\"disables save button if title or body is empty\", async () => {\n    const onSaveMock = jest.fn();\n    const onCloseMock = jest.fn();\n\n    const { getByPlaceholderText, getByText } = render(\n      <NoteDialogBox open={true} onClose={onCloseMock} onSave={onSaveMock} title=\"\" body=\"\" />\n    );\n\n    const titleInput = getByPlaceholderText(\"Title\");\n    const bodyInput = getByPlaceholderText(\"Body\");\n    const saveButton = getByText(\"Save\");\n\n    // Verify save button is initially disabled\n    expect(saveButton).toBeDisabled();\n\n    // Enter valid title and body\n    fireEvent.change(titleInput, {\n      target: { value: \"Valid Title\" },\n    });\n\n    fireEvent.change(bodyInput, {\n      target: { value: \"Valid Body\" },\n    });\n\n    // Wait for the component to re-render after state updates\n    await waitFor(() => {\n      // Save button should not have 'disabled' attribute\n      expect(saveButton).not.toBeDisabled();\n    });\n\n    // Clear title and body to make save button disabled\n    fireEvent.change(titleInput, {\n      target: { value: \"\" },\n    });\n\n    fireEvent.change(bodyInput, {\n      target: { value: \"\" },\n    });\n\n    // Wait for the component to re-render after state updates\n    await waitFor(() => {\n      // Save button should have 'disabled' attribute set to true\n      expect(saveButton).toBeDisabled();\n    });\n  });\n});\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,SAAS,EAAEC,OAAO,QAAQ,wBAAwB;AACnE,OAAO,yCAAyC;AAEhD,OAAOC,aAAa,MAAM,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/CC,QAAQ,CAAC,yBAAyB,EAAE,MAAM;EACxCC,IAAI,CAAC,0BAA0B,EAAE,MAAM;IACrC,MAAM;MAAEC;IAAU,CAAC,GAAGR,MAAM,eAC1BK,OAAA,CAACF,aAAa;MAACM,IAAI,EAAE,IAAK;MAACC,OAAO,EAAEA,CAAA,KAAM,CAAC,CAAE;MAACC,MAAM,EAAEA,CAAA,KAAM,CAAC,CAAE;MAACC,KAAK,EAAC,EAAE;MAACC,IAAI,EAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACpF,CAAC;IACD,MAAMC,WAAW,GAAGV,SAAS,CAAC,cAAc,CAAC;IAC7CW,MAAM,CAACD,WAAW,CAAC,CAACE,iBAAiB,CAAC,CAAC;EACzC,CAAC,CAAC;EAEFb,IAAI,CAAC,gDAAgD,EAAE,YAAY;IACjE,MAAMc,UAAU,GAAGC,IAAI,CAACC,EAAE,CAAC,CAAC;IAC5B,MAAMC,WAAW,GAAGF,IAAI,CAACC,EAAE,CAAC,CAAC;IAE7B,MAAM;MAAEE,oBAAoB;MAAEjB;IAAU,CAAC,GAAGR,MAAM,eAChDK,OAAA,CAACF,aAAa;MAACM,IAAI,EAAE,IAAK;MAACC,OAAO,EAAEc,WAAY;MAACb,MAAM,EAAEU,UAAW;MAACT,KAAK,EAAC,EAAE;MAACC,IAAI,EAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACzF,CAAC;IAED,MAAMS,UAAU,GAAGD,oBAAoB,CAAC,OAAO,CAAC;IAChD,MAAME,SAAS,GAAGF,oBAAoB,CAAC,MAAM,CAAC;IAC9C,MAAMG,UAAU,GAAGpB,SAAS,CAAC,MAAM,CAAC;;IAEpC;IACAW,MAAM,CAACS,UAAU,CAAC,CAACC,YAAY,CAAC,CAAC;;IAEjC;IACA5B,SAAS,CAAC6B,MAAM,CAACJ,UAAU,EAAE;MAC3BK,MAAM,EAAE;QAAEC,KAAK,EAAE;MAAc;IACjC,CAAC,CAAC;IAEF/B,SAAS,CAAC6B,MAAM,CAACH,SAAS,EAAE;MAC1BI,MAAM,EAAE;QAAEC,KAAK,EAAE;MAAa;IAChC,CAAC,CAAC;;IAEF;IACA,MAAM9B,OAAO,CAAC,MAAM;MAClB;MACAiB,MAAM,CAACS,UAAU,CAAC,CAACK,GAAG,CAACJ,YAAY,CAAC,CAAC;IACvC,CAAC,CAAC;;IAEF;IACA5B,SAAS,CAAC6B,MAAM,CAACJ,UAAU,EAAE;MAC3BK,MAAM,EAAE;QAAEC,KAAK,EAAE;MAAG;IACtB,CAAC,CAAC;IAEF/B,SAAS,CAAC6B,MAAM,CAACH,SAAS,EAAE;MAC1BI,MAAM,EAAE;QAAEC,KAAK,EAAE;MAAG;IACtB,CAAC,CAAC;;IAEF;IACA,MAAM9B,OAAO,CAAC,MAAM;MAClB;MACAiB,MAAM,CAACS,UAAU,CAAC,CAACC,YAAY,CAAC,CAAC;IACnC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}